{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","className","onSubmit","e","preventDefault","trim","length","cat","type","value","placeholder","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","console","log","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAOC,UAAU,qCAAqCC,SAXrC,SAACC,GAClBA,EAAEC,iBAE+B,IAA7BL,EAAWM,OAAOC,SAClBT,GAAe,SAAAU,GAAG,OAAKR,GAAL,mBAAoBQ,OACtCP,EAAc,MAMlB,SACI,uBACIQ,KAAK,OACLC,MAASV,EACTW,YAAY,WACZC,SArBc,SAACR,GAEvBH,EAAcG,EAAES,OAAOH,QAoBfR,UAAU,kK,+BC5BbY,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCGPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OACI,sBAAKf,UAAU,mIAAf,UAKI,qBACI6B,IAAMd,EAAMe,IAAML,EAClBzB,UAAU,2FAKd,oBAAGA,UAAU,4DAAb,cAA2EyB,EAA3E,WCfCM,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAGtB,ECNyB,SAAEA,GAE3B,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAhBAC,qBAAW,WAGPvB,EAASC,GACJuB,MAAM,SAAAb,GACHc,YAAW,WACPH,EAAS,CACLd,KAAMG,EACNS,SAAS,MAEd,UAIZ,CAACnB,IAEGoB,EDjB2BK,CAAczB,GAAnCa,EAAb,EAAQN,KAAcY,EAAtB,EAAsBA,QAEtB,OADAO,QAAQC,IAAIR,GAGR,cADA,CACA,sBACI,qBAAKhC,UAAU,wCAAf,SACI,sBAAKA,UAAU,8NAAf,cAMQa,OAGXmB,EAAU,mBAAGhC,UAAU,sKAAb,wBAOO,KAClB,qBAAKA,UAAU,8HAAf,SAKgB0B,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAEQA,GADGA,EAAIC,aElClCiB,EAAe,WAIxB,MAAoC5C,mBAAS,CAAC,eAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAQA,OACI,qCACI,qBAAKI,UAAU,sGAAf,SAII,oBAAIA,UAAU,iLAAd,4BAQJ,cAAC,EAAD,CAAaJ,cAAgBA,IAC7B,6BAGQ8C,EAAWpB,KAAM,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEIA,SAAWA,GADLA,YC9BlC8B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.5648c45e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n        \r\n        setinputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length !== 0) {\r\n            setCategories( cat => [inputValue, ...cat]);\r\n            setinputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form  className=\"grid justify-items-center m-2 py-4\" onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value= { inputValue }\r\n                placeholder=\"Busqueda\"\r\n                onChange= { handleInputChange }\r\n                className=\"\r\n                rounded-full border-4 border-black w-2/4 h-10\r\n                focus:ring-2 focus:ring-red-500 focus:border-transparent\r\n                text-center text-2xl\r\n                sm:text-lg sm:w-11/12\"\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n\r\n\r\n","\r\nexport const getGifs = async ( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=12&api_key=3f3LaMXN16Ls2g2WyCHuivwjI4iaHJv3`;\r\n    const resp = await fetch( url )\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}\r\n\r\n","\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    // console.log({id, title, url})\r\n\r\n    return (\r\n        <div className=\"grid justify-items-center bg-green-200 border-4 \r\n            border-black w-11/12 m-4 p-10\r\n            sm:m-3 sm:p-3\r\n            md:m-3 md:p-3\r\n            lg:m-3 lg:p-3\">\r\n            <img \r\n                src={ url } alt={ title }\r\n                className=\"h-screen max-h-96 w-1/4 max-w-md min-w-full rounded-2xl\r\n                sm:w-1/4\r\n                md:h-72\r\n                lg:h-72\" \r\n                />\r\n            <p className=\"font-mono text-2xl pt-4 text-center md:text-lg lg:text-lg\"> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n}\r\n\r\n\r\n\r\n","\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n   \r\n    const { data:images , loading } = useFetchGifs( category );\r\n    console.log(loading)\r\n    return (\r\n        /* bg-yellow-100 */\r\n        <>\r\n            <div className=\"bg-yellow-100 m-4 grid justify-center\">\r\n                <div className=\"animate__animated animate__fadeIn \r\n                    ml-5 p-6 text-3xl \r\n                    rounded-full border-4 w-auto max-w-md grid justify-items-center\r\n                    border-pink-400 bg-black text-pink-400\r\n                    sm:m-0 sm:p-3 sm:text-xl\r\n                    lg:m-0 lg:p-3 lg:text-xl\r\n                    \"> {category}\r\n                </div>\r\n            </div>\r\n           { loading ? <p className=\"animate__animated animate__flash \r\n            loading grid justify-items-center \r\n            text-purple-400 text-6xl my-48 p-2\r\n            sm:text-3xl sm:my-20\r\n            md:my-20\r\n            lg:my-20\r\n            xl:my-20\"\r\n            >Loading...</p> : null }\r\n            <div className=\"grid grid-cols-3 bg-yellow-100 \r\n                sm:grid-cols-1 sm:m-0 sm:p-0\r\n                md:grid-cols-2 md:m-0 md:p-0\r\n                lg:grid-cols-2 lg:m-0 lgp-0\">\r\n                    {\r\n                            images.map( (img) => (\r\n                                <GifGridItem \r\n                                    key = {img.id}\r\n                                    {...img }\r\n                                />\r\n                            ))\r\n                    }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n  \r\n\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const  useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        \r\n\r\n        getGifs( category )\r\n            .then( img => {\r\n                setTimeout(() => {\r\n                    setState({\r\n                        data: img,\r\n                        loading: false\r\n                    });\r\n                }, 1000);\r\n            } )\r\n\r\n\r\n    }, [category])\r\n\r\n    return state; // { data:[], loading: true }\r\n\r\n}\r\n\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    //En este caso lo hacemos con un useState porque con el arreglo no podemos mutar los datos\r\n    const [categories, setCategories] = useState(['Evangelion']);\r\n\r\n    //Agregar elemento al arreglo\r\n    /* const handleAdd = () => {\r\n        // setcategories([...categories, 'Naruto']);\r\n        setcategories( cat => [...cat, 'Naruto']);\r\n    } */\r\n\r\n    return (\r\n        <>\r\n            <div className=\"grid justify-items-center pl-6 py-6 bg-yellow-100 \r\n                sm:m-2 sm:p-2 \r\n                md:m-2 md:p-2\r\n                lg:m-2 lg:p-2\">\r\n                <h1 className=\"animate__animated animate__rubberBand \r\n                    font-mono text-9xl text-blue-400\r\n                    tracking-widest tittle_page cursor-pointer\r\n                    sm:text-3xl\r\n                    md:text-6xl\r\n                    lg:text-7xl\r\n                    xl:text-8xl\">GifExpertApp</h1>\r\n            </div>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <ol>\r\n                {\r\n                    /* Debemos definir el indice del elemento, en este caso key={category}*/\r\n                    categories.map(  category =>\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category } />\r\n                        )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { GifExpertApp } from './GifExpertApp';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}